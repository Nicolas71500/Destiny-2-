====================================================================
         GUIDE COMPLET : IMPLICIT FLOW BUNGIE (100% FRONTEND)
====================================================================

🎯 POURQUOI IMPLICIT FLOW ?
===========================
- ✅ 100% Frontend - Pas besoin de backend
- ✅ Pas de CLIENT_SECRET à cacher
- ✅ Plus simple à implémenter
- ✅ Parfait pour les Single Page Apps
- ⚠️ Token moins durable (mais suffisant pour notre usage)

🔧 1. CONFIGURATION BUNGIE
==========================

Aller sur : https://www.bungie.net/en/Application
Modifier votre application :

OAuth Client Type: Public (PAS Confidential)
Redirect URL: https://votre-app.vercel.app/auth/callback
Response Type: token (PAS code)
Scope: ReadUserData, ReadBasicUserProfile

📁 2. STRUCTURE DES FICHIERS À CRÉER
====================================

src/
├── services/
│   └── bungie-auth.js (Service d'authentification)
├── hooks/
│   └── useBungieAuth.js (Hook React)
├── components/
│   ├── BungieLogin.js (Bouton de connexion)
│   └── AuthCallback.js (Page de callback)
└── App.js (Intégration)

🚀 3. SERVICE D'AUTHENTIFICATION
================================

Créer : src/services/bungie-auth.js

const CLIENT_ID = process.env.REACT_APP_BUNGIE_CLIENT_ID;
const API_KEY = process.env.REACT_APP_BUNGIE_API_KEY;

// Générer l'URL de connexion Bungie (Implicit Flow)
export const getBungieAuthUrl = () => {
  const state = Math.random().toString(36).substring(2, 15);
  const nonce = Math.random().toString(36).substring(2, 15);
  
  // Sauvegarder l'état pour validation
  localStorage.setItem('oauth_state', state);
  localStorage.setItem('oauth_nonce', nonce);
  
  const params = new URLSearchParams({
    client_id: CLIENT_ID,
    response_type: 'token',  // 🎯 TOKEN au lieu de CODE
    redirect_uri: `${window.location.origin}/auth/callback`,
    state: state,
    nonce: nonce
  });
  
  return `https://www.bungie.net/en/OAuth/Authorize?${params}`;
};

// Traiter le callback avec le token dans l'URL
export const handleImplicitCallback = () => {
  // Le token arrive dans le hash de l'URL (#access_token=...)
  const hash = window.location.hash.substring(1);
  const params = new URLSearchParams(hash);
  
  const accessToken = params.get('access_token');
  const membershipId = params.get('membership_id');
  const state = params.get('state');
  const tokenType = params.get('token_type');
  const expiresIn = params.get('expires_in');
  
  // Vérifier l'état de sécurité
  const storedState = localStorage.getItem('oauth_state');
  if (state !== storedState) {
    throw new Error('État OAuth invalide - Possible attaque CSRF');
  }
  
  if (!accessToken || !membershipId) {
    throw new Error('Token d\'accès ou ID de membre manquant');
  }
  
  // Calculer l'expiration
  const expirationTime = Date.now() + (parseInt(expiresIn) * 1000);
  
  // Sauvegarder les données d'authentification
  localStorage.setItem('bungie_access_token', accessToken);
  localStorage.setItem('bungie_membership_id', membershipId);
  localStorage.setItem('bungie_token_type', tokenType || 'Bearer');
  localStorage.setItem('bungie_token_expires', expirationTime.toString());
  
  // Nettoyer les données temporaires
  localStorage.removeItem('oauth_state');
  localStorage.removeItem('oauth_nonce');
  
  return {
    accessToken,
    membershipId,
    tokenType,
    expiresAt: new Date(expirationTime)
  };
};

// Vérifier si le token est valide
export const isTokenValid = () => {
  const token = localStorage.getItem('bungie_access_token');
  const expiresAt = localStorage.getItem('bungie_token_expires');
  
  if (!token || !expiresAt) {
    return false;
  }
  
  // Vérifier si le token n'est pas expiré (avec marge de 5 minutes)
  const isExpired = Date.now() > (parseInt(expiresAt) - 5 * 60 * 1000);
  
  if (isExpired) {
    // Nettoyer le token expiré
    clearAuthData();
    return false;
  }
  
  return true;
};

// Nettoyer les données d'authentification
export const clearAuthData = () => {
  localStorage.removeItem('bungie_access_token');
  localStorage.removeItem('bungie_membership_id');
  localStorage.removeItem('bungie_token_type');
  localStorage.removeItem('bungie_token_expires');
};

// Récupérer les informations du profil utilisateur
export const getBungieProfile = async () => {
  if (!isTokenValid()) {
    throw new Error('Token invalide ou expiré');
  }
  
  const token = localStorage.getItem('bungie_access_token');
  const membershipId = localStorage.getItem('bungie_membership_id');
  
  try {
    const response = await fetch(
      `https://www.bungie.net/Platform/User/GetBungieNetUserById/${membershipId}/`,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'X-API-Key': API_KEY,
          'Content-Type': 'application/json'
        }
      }
    );
    
    if (!response.ok) {
      if (response.status === 401) {
        clearAuthData();
        throw new Error('Token expiré');
      }
      throw new Error(`Erreur API: ${response.status}`);
    }
    
    const data = await response.json();
    return data.Response;
  } catch (error) {
    throw new Error(`Erreur lors de la récupération du profil: ${error.message}`);
  }
};

// Récupérer les personnages Destiny 2 du joueur
export const getDestinyProfile = async () => {
  if (!isTokenValid()) {
    throw new Error('Token invalide ou expiré');
  }
  
  const token = localStorage.getItem('bungie_access_token');
  const membershipId = localStorage.getItem('bungie_membership_id');
  
  try {
    // D'abord, obtenir les memberships Destiny
    const membershipResponse = await fetch(
      `https://www.bungie.net/Platform/Destiny2/254/Profile/${membershipId}/?components=100`,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'X-API-Key': API_KEY,
          'Content-Type': 'application/json'
        }
      }
    );
    
    if (!membershipResponse.ok) {
      throw new Error(`Erreur membership: ${membershipResponse.status}`);
    }
    
    const membershipData = await membershipResponse.json();
    return membershipData.Response;
  } catch (error) {
    throw new Error(`Erreur Destiny profile: ${error.message}`);
  }
};

// Récupérer l'inventaire d'un personnage
export const getCharacterInventory = async (membershipType, destinyMembershipId, characterId) => {
  if (!isTokenValid()) {
    throw new Error('Token invalide ou expiré');
  }
  
  const token = localStorage.getItem('bungie_access_token');
  
  try {
    const response = await fetch(
      `https://www.bungie.net/Platform/Destiny2/${membershipType}/Profile/${destinyMembershipId}/Character/${characterId}/?components=201,205`,
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'X-API-Key': API_KEY,
          'Content-Type': 'application/json'
        }
      }
    );
    
    if (!response.ok) {
      throw new Error(`Erreur inventaire: ${response.status}`);
    }
    
    const data = await response.json();
    return data.Response;
  } catch (error) {
    throw new Error(`Erreur récupération inventaire: ${error.message}`);
  }
};

🎮 4. HOOK REACT D'AUTHENTIFICATION
===================================

Créer : src/hooks/useBungieAuth.js

import { useState, useEffect } from 'react';
import {
  getBungieProfile,
  getDestinyProfile,
  isTokenValid,
  clearAuthData,
  handleImplicitCallback
} from '../services/bungie-auth';

export const useBungieAuth = () => {
  const [user, setUser] = useState(null);
  const [destinyProfile, setDestinyProfile] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  // Charger les données utilisateur au démarrage
  useEffect(() => {
    const initAuth = async () => {
      try {
        setLoading(true);
        setError(null);
        
        if (isTokenValid()) {
          await loadUserData();
        } else {
          setIsAuthenticated(false);
        }
      } catch (err) {
        setError(err.message);
        setIsAuthenticated(false);
      } finally {
        setLoading(false);
      }
    };

    initAuth();
  }, []);

  // Charger les données du profil utilisateur
  const loadUserData = async () => {
    try {
      const [bungieProfile, destinyData] = await Promise.all([
        getBungieProfile(),
        getDestinyProfile()
      ]);
      
      setUser(bungieProfile);
      setDestinyProfile(destinyData);
      setIsAuthenticated(true);
    } catch (err) {
      throw new Error(`Erreur chargement données: ${err.message}`);
    }
  };

  // Lancer la connexion
  const login = (authUrl) => {
    setError(null);
    window.location.href = authUrl;
  };

  // Traiter le retour de Bungie
  const handleCallback = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const authData = handleImplicitCallback();
      await loadUserData();
      
      return authData;
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Déconnexion
  const logout = () => {
    clearAuthData();
    setUser(null);
    setDestinyProfile(null);
    setIsAuthenticated(false);
    setError(null);
  };

  // Rafraîchir les données
  const refresh = async () => {
    if (!isTokenValid()) {
      logout();
      return;
    }
    
    try {
      await loadUserData();
    } catch (err) {
      setError(err.message);
    }
  };

  return {
    user,
    destinyProfile,
    loading,
    error,
    isAuthenticated,
    login,
    logout,
    handleCallback,
    refresh
  };
};

🔗 5. COMPOSANT DE CONNEXION
============================

Créer : src/components/BungieLogin.js

import React from 'react';
import { getBungieAuthUrl } from '../services/bungie-auth';
import { useBungieAuth } from '../hooks/useBungieAuth';

const BungieLogin = () => {
  const { user, destinyProfile, isAuthenticated, login, logout, loading, error } = useBungieAuth();

  if (loading) {
    return (
      <div className="bungie-auth-loading">
        <div className="spinner">⏳</div>
        <span>Chargement...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bungie-auth-error">
        <span>❌ {error}</span>
        <button onClick={() => window.location.reload()} className="retry-btn">
          Réessayer
        </button>
      </div>
    );
  }

  if (isAuthenticated && user) {
    return (
      <div className="bungie-user-profile">
        <div className="user-info">
          <img 
            src={user.profilePicturePath ? 
              `https://www.bungie.net${user.profilePicturePath}` : 
              '/default-avatar.png'
            }
            alt="Avatar Bungie"
            className="user-avatar"
            onError={(e) => {
              e.target.src = '/default-avatar.png';
            }}
          />
          <div className="user-details">
            <span className="username">{user.displayName}</span>
            {destinyProfile?.profile?.data?.userInfo && (
              <span className="destiny-id">
                {destinyProfile.profile.data.userInfo.displayName}
              </span>
            )}
          </div>
        </div>
        <button onClick={logout} className="logout-btn">
          Déconnexion
        </button>
      </div>
    );
  }

  return (
    <button 
      onClick={() => login(getBungieAuthUrl())}
      className="bungie-login-btn"
      title="Se connecter avec votre compte Bungie pour voir vos exotiques"
    >
      <img src="/bungie-logo.png" alt="Bungie" className="bungie-logo" />
      Se connecter avec Bungie
    </button>
  );
};

export default BungieLogin;

📱 6. PAGE DE CALLBACK
======================

Créer : src/components/AuthCallback.js

import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useBungieAuth } from '../hooks/useBungieAuth';

const AuthCallback = () => {
  const navigate = useNavigate();
  const { handleCallback } = useBungieAuth();
  const [status, setStatus] = useState('processing');
  const [message, setMessage] = useState('Connexion en cours...');

  useEffect(() => {
    const processCallback = async () => {
      try {
        // Vérifier s'il y a une erreur dans l'URL
        const urlParams = new URLSearchParams(window.location.search);
        const error = urlParams.get('error');
        const errorDescription = urlParams.get('error_description');
        
        if (error) {
          setStatus('error');
          setMessage(errorDescription || 'Erreur d\'authentification');
          setTimeout(() => navigate('/'), 3000);
          return;
        }
        
        // Traiter le callback OAuth
        setMessage('Traitement de l\'authentification...');
        await handleCallback();
        
        setStatus('success');
        setMessage('Connexion réussie ! Redirection...');
        
        // Rediriger après 2 secondes
        setTimeout(() => {
          navigate('/');
        }, 2000);
        
      } catch (err) {
        setStatus('error');
        setMessage(err.message || 'Erreur lors de la connexion');
        
        // Rediriger vers l'accueil après 3 secondes
        setTimeout(() => {
          navigate('/?error=' + encodeURIComponent(err.message));
        }, 3000);
      }
    };

    processCallback();
  }, [handleCallback, navigate]);

  return (
    <div className="auth-callback-container">
      <div className="auth-callback-card">
        <div className="auth-callback-header">
          <img src="/bungie-logo.png" alt="Bungie" className="bungie-logo-large" />
          <h2>Authentification Bungie</h2>
        </div>
        
        <div className="auth-callback-content">
          {status === 'processing' && (
            <div className="auth-status processing">
              <div className="spinner-large">⏳</div>
              <p>{message}</p>
            </div>
          )}
          
          {status === 'success' && (
            <div className="auth-status success">
              <div className="success-icon">✅</div>
              <p>{message}</p>
            </div>
          )}
          
          {status === 'error' && (
            <div className="auth-status error">
              <div className="error-icon">❌</div>
              <p>{message}</p>
              <button 
                onClick={() => navigate('/')}
                className="back-home-btn"
              >
                Retour à l'accueil
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default AuthCallback;

🎯 7. INTÉGRATION DANS APP.JS
=============================

Modifier : src/App.js

// Ajouter les imports
import BungieLogin from './components/BungieLogin';
import AuthCallback from './components/AuthCallback';

function App() {
  const [activeTab, setActiveTab] = useState("weapons");
  const { manifestLoaded, loading } = useManifest();

  // Écran de chargement...
  if (loading || !manifestLoaded) {
    return (
      <div className="App">
        <div className="loading-screen">
          <h2>Chargement du manifest Destiny 2...</h2>
          <p>Veuillez patienter, cela peut prendre quelques secondes.</p>
          {loading && <div className="spinner">⏳</div>}
        </div>
      </div>
    );
  }

  return (
    <Router>
      <div className="App">
        <header className="App-header">
          <div className="header-main">
            <h1>Destiny 2 Exotic Tracker</h1>
            <BungieLogin /> {/* 🎯 Nouveau composant */}
          </div>
          
          <nav>
            <button
              className={activeTab === "weapons" ? "nav-btn active" : "nav-btn"}
              onClick={() => setActiveTab("weapons")}
            >
              Armes Exotiques
            </button>
            <button
              className={activeTab === "armors" ? "nav-btn active" : "nav-btn"}
              onClick={() => setActiveTab("armors")}
            >
              Armures Exotiques
            </button>
          </nav>
        </header>

        <main>
          <Routes>
            <Route
              path="/"
              element={activeTab === "weapons" ? <WeaponList /> : <ArmorList />}
            />
            <Route path="/auth/callback" element={<AuthCallback />} /> {/* 🎯 Nouvelle route */}
            <Route path="/item/:type/:hash" element={<ItemDetail />} />
          </Routes>
        </main>
      </div>
    </Router>
  );
}

export default App;

🎨 8. STYLES CSS BASIQUES
=========================

Ajouter dans : src/styles/App.css

/* Authentification Bungie */
.header-main {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  margin-bottom: 1rem;
}

.bungie-login-btn {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 16px;
  background: #1e3a8a;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 14px;
  transition: background 0.2s;
}

.bungie-login-btn:hover {
  background: #1e40af;
}

.bungie-logo {
  width: 20px;
  height: 20px;
}

.bungie-user-profile {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 8px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 8px;
}

.user-info {
  display: flex;
  align-items: center;
  gap: 8px;
}

.user-avatar {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  border: 2px solid #3b82f6;
}

.user-details {
  display: flex;
  flex-direction: column;
}

.username {
  font-weight: bold;
  font-size: 14px;
}

.destiny-id {
  font-size: 12px;
  opacity: 0.8;
}

.logout-btn {
  padding: 4px 8px;
  background: #dc2626;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 12px;
}

.logout-btn:hover {
  background: #ef4444;
}

/* Page de callback */
.auth-callback-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 80vh;
  padding: 20px;
}

.auth-callback-card {
  background: white;
  border-radius: 12px;
  padding: 40px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  text-align: center;
  max-width: 400px;
  width: 100%;
}

.auth-callback-header {
  margin-bottom: 30px;
}

.bungie-logo-large {
  width: 60px;
  height: 60px;
  margin-bottom: 16px;
}

.auth-status {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 16px;
}

.spinner-large {
  font-size: 2rem;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

.success-icon {
  font-size: 3rem;
  color: #10b981;
}

.error-icon {
  font-size: 3rem;
  color: #ef4444;
}

.back-home-btn {
  padding: 8px 16px;
  background: #3b82f6;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}

🚀 9. COMMANDES D'INSTALLATION
==============================

# Créer tous les nouveaux fichiers
mkdir -p src/services src/hooks src/components

# Créer les fichiers vides
touch src/services/bungie-auth.js
touch src/hooks/useBungieAuth.js
touch src/components/BungieLogin.js
touch src/components/AuthCallback.js

# Après avoir codé tous les fichiers
git add .
git commit -m "Add Bungie Implicit Flow authentication"
git push

🔧 10. VARIABLES D'ENVIRONNEMENT
================================

Vérifier dans .env et Vercel :
REACT_APP_BUNGIE_CLIENT_ID=49799
REACT_APP_BUNGIE_API_KEY=b2b1edc26e44440e80185d9cecf7cef3

⚠️ PAS BESOIN de CLIENT_SECRET avec Implicit Flow !

🎯 11. ÉTAPES DE DÉPLOIEMENT
===========================

1. ✅ Configurer l'app Bungie en mode "Public"
2. ✅ Créer tous les fichiers listés ci-dessus
3. ✅ Copier-coller le code fourni
4. ✅ Ajouter les styles CSS
5. ✅ Tester en local (npm start)
6. ✅ Pousser sur Git
7. ✅ Vérifier le déploiement Vercel
8. ✅ Tester la connexion Bungie en production

🚨 12. POINTS IMPORTANTS
========================

- ✅ Implicit Flow = Token dans l'URL (plus simple)
- ✅ Pas de backend nécessaire
- ⚠️ Token expire plus vite (géré automatiquement)
- 🔒 Validation d'état pour sécurité CSRF
- 📱 Gestion d'erreurs complète
- 🎮 Accès aux données Destiny du joueur

🎮 13. DONNÉES RÉCUPÉRABLES
===========================

Après connexion, accès à :
- ✅ Profil Bungie de l'utilisateur
- ✅ Personnages Destiny 2
- ✅ Inventaire de chaque personnage
- ✅ Équipement actuellement porté
- ✅ Coffre-fort (Vault)
- ✅ Collections et triomphes
- ✅ Statistiques de jeu

🎯 14. PROCHAINES ÉTAPES
========================

1. Implémenter la base (connexion/déconnexion)
2. Ajouter récupération inventaire
3. Marquer automatiquement les exotiques possédés
4. Ajouter statistiques d'utilisation
5. Créer système de builds
6. Ajouter comparaisons entre joueurs

====================================================================
                         FIN DU GUIDE COMPLET
====================================================================

💡 RAPPEL : Cette conversation sera perdue si vous quittez VS Code !
   Sauvegardez ce fichier et vos modifications Git avant de partir.

🚀 Bon développement ! Revenez quand vous voulez implémenter tout ça !
====================================================================